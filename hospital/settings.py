"""
Django settings for hospital project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Realiazar el pip install mysqlclient todo esto nos permitira conectarnos a una BD MySQL. Despues de realizar esto bajamos hasta la seccion de DATABASE ↓

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*(57ykba6^nsyf-5v-a6rjng470d7zr6skl$jd#1-m)znz6u=t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "controlUsuario",
    "hospital_pacientes",
    "hospital_personal",
    "intermedio"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'hospital_personal.middleware.ForzarCambioPasswordMiddleware',  # Middleware nuevo para que el usuario no pueda navegar entre URLs hasta que no cambie la contraseña
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hospital.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                BASE_DIR / 'templates_globales',  # Si tienes templates globales (opcional)
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'hospital_pacientes.context_processors.enlace_info',  # Variable global | info en context_processors.py
                'hospital_personal.context_processors.especialidad_actual',  # Variable global | info en context_processors.py
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hospital.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {  # Modificamos los valores por defecto de SQLite por las configuraciones para MySQL :
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # Motor de base de datos MySQL
        'NAME': 'hospitalBD',  # El nombre de tu base de datos MySQL
        'USER': 'root',  # El usuario de tu base de datos MySQL
        'PASSWORD': 'atenas123',  # La contraseña del usuario de la base de datos
        'HOST': 'localhost',  # O la dirección de tu servidor MySQL, si es remoto
        'PORT': '3307',  # El puerto predeterminado de MySQL 8.0 
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  # Es una configuración que hace que MySQL sea más estricto con los datos que acepta. Por ejemplo, si intentás guardar un valor inválido en una columna (como un texto en un campo numérico, o un valor nulo donde no se permite), MySQL lanzará un error en vez de ignorar el problema o corregirlo automáticamente.
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'controlUsuario.Persona'   # Tabla/modelo dondes se guardaran los usuarios. La configuración AUTH_USER_MODEL le dice a Django que utilice un modelo de usuario personalizado en lugar del modelo predeterminado "User".



# Agregamos esto para que el login_required funcione correctamente :
LOGIN_URL = 'login'  # Definimos LOGIN_URL con la ruta asociada a "login" , para que cuando alguien quiera acceder a una ruta/vista en la que se requiere previamente estar logueado , te envie a la ruta/vista de "Iniciar Sesion".

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Configuración para los archivos de medios
MEDIA_URL = '/media/'  # URL que usará el navegador para acceder a los archivos de medios

# Directorio físico donde se guardarán los archivos de medios (especificamos la carpeta 'media')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


STATIC_URL = 'static/'

# Definir la carpeta estática global
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static_global'),  # Carpeta estática global
]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
